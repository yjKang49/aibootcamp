#파이썬이 제공하는 데이터 타입은 아주 많다. 
#변수를 미리 선언할 필요가 없다.아무데서나 만들어 쓰면 그때부터 사용가능하다. 
#다른 언어에서는 변수 자체가 특정타입만 저장가능하다.
#파이썬에서는 변수에는 아무타입이나 저장이 가능하다. 
#다른 언어에서는 변수에 타입을 주고 그 타입만 저장가능하다. 
#int a;  (e.i. java language)
#a = 3.4;
#인터프리터: 한 줄 읽고 한 줄 번역해서 실행하는 언어류들은 원래 변수에 특정 데이터 타입만 저장하지 않고 아무 타입이나 다 넣을 수 있다.

a1 = 4
print(a1, type(a1))

a1 = 4.5
print(a1, type(a1))

a1 = "4"
print(a1, type(a1))

#컬렉션류 - 데이터를 담아두는 데이터 타입, list, tuple, dict, set(집합타입)
a1 = list()
a1.append("1")
a1.append("2")
print(a1, type(a1))
print('list[0]: ' + a1[0])

#list
a1 = [1,2,3]
print(a1, type(a1))

#tuple은 한 번 만들어지면 내부 데이터 수정이 되지 않는다. read-only
#list보다 속도가 빠르고 파이썬 내부에서 데이터를 대충 묶어서 데리고 다닐 때 필요하다.
#함수에서 값 반환시 많이 사용한다. 
a1 = (1,2,3)
print(a1, type(a1))

#dict
a1 = dict()
a1['school'] = '학교'
a1['rain'] = '비'
print(a1, type(a1))
#위와 같은 문법
a1 = {'school': '학교', 'rain': '비'}
print(a1, type(a1))

"""
a1 : 변수    다른 언어들은 변수에 값을 저장하거나 참조를 저장한다. 
a1 : 100 - 실데이터 일 수도 있고 실데이터가 있는 곳의 주소가 될 수도 있다. 
주소: 컴퓨터의 메모리 공간을 관리하기 쉽게 0,1,2,3 숫자를 붙여나가고 이를 번지(address), 주소라고 한다. 

주소부여방식이 1. 직접부여  2. 간접부여                         java, c#, c++
1. 직접주소방식: 주소를 찾아갔더니 거기에 데이터가 존재하면     -값타입
2. 간접주소방식: 주소를 찾아갔더니 거기에 데이터의 주소가 들어있다.     -참조타입, 포인터타입

C language
int a;  //값타입
int *pA;    //포인터타입

java
배열, 클래스 - 참조타입
나머지는 다 값타입

python 
전부 참조. 값타입 존재안함
전부참조라서 실제 데이터 크기는 상관없이 변수에는 값 자체가 아니고 번지만 저장된다. 
값과 달리 번지는 모두 같은 크기라서 메모리관리에 용이

+) 
c와 자바는 호환이 안됨. 자바코드를 c로 바꿔야함. 반면 python과 c는 호환이 좋음. python은 c의 좋은점을 상속함. 
python은 내부적으로 포인터, 메모리관리 알아서 함. 빅데이터 라이브러리는 c가 많음.pandas, numpy etc

"""

