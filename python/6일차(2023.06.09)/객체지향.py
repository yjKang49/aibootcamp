#사람이 사물을 바라보는 형태로 프로그램을 한다.
#변수와 함수는 별개이다. 따로 따로 만든다. 
#점차 변수도 많고 함수도 많음. 관리가 어렵다. => 그중에 어떤 변수, 함수는 서로 관련이 있다. 
#                                           => 관련있는 변수와 함수를 묶어보자  => 클래스(사용자가 만드는 데이터 타입이다)
#list, dict, tuple -> 시스템이 만드는 클래스, 내장 라이브러리, 내장클래스 
#위의 클래스들을 부품형 클래스 - 부품형 클래스 만드는 방법      #부품형클래스는 개발자들 편하라구
#부품을 써서 완성형 클래스를 만드는 방법은 서로 다르다.

#프로그램을 빠르고 확장성있게 만들기 위한 것이 객체지향프로그램이다. 
#관련있는 것들끼리 묶어서 클래스를 만들자(list나 dict같은 타입이다.)
#클래스는 객체를 만들어야 사용이 가능하다

a = list()      #a=[], list타입의 객체를 생성한다, 생성공간은 heap(자유메모리)이고, 객체의 첫위치를 전달한다. 
                #만약 메모리가 부족하면 None이 온다. (다른 언어에서는 null)

#사람의 개인 정보를 만든다. 
#java는 클래스 내부의 요소들에 대해 접근권한이 있었음. (private: 나만, public:밖에서도 접근가능)
#python은 변수를 public으로 둔다 
class Person:
    #함수 밖에다가 변수를 선언했을 경우에 메모리가 클래스 지정할 때 하나만 만들어진다.
    name = '홍길동'     #클래스안에 변수를 만든다. 
    age= 23
    phone = []      #클래스 정의할 때 딱 한번 실행
    #이 위치에 list나 dict같은 객체를 선언할 경우에 객체가 클래스 정의시 딱 한번만 만들어져서 공유되기 때문에 가급적 이 위치에 변수 만들지 말자
    
    #생성자 - 특별한 유형의 함수, 객체 생성시 자동으로 호출되는 메서드이다.
    #__int__ (언더바 두개********)
    #함수나 변수중에 __(언더바 두개)로 시작한다. 그러면 파이썬이 특수목적으로 만든거다. 
    def __init__(self):  #첫번째 인자로 객체에 대한 참조가 전달되도록 되어있어서
                            #변수명이 꼭 self일 필요는 없지만 다른 사람들도 다 self쓰니까 우리도.
                            #클래스안에 선언된 함수는 첫번째 인자로 객체에 대한 참조를 전달하도록 되어있다.
        self.name='조땡땡'
        self.age=28
        self.phone = []
        print('생성자 호출')
    #변수 생성은 생성자에서 하자
    
p1 = Person() #객체(object) 생성, 이 객체를 인스턴스라고도 부른다. 
p1.phone.append('010-0000-0001')
print( p1.name )
print( p1.age )
print( p1.phone )


p2 = Person() #객체(object) 생성, 이 객체를 인스턴스라고도 부른다. 
p2.name = '임꺽정'  #이때 p2용의 name속성을 만들어서 데이터를 저장한다. 
p2.phone.append('010-0000-0002')
print( p2.name )
print( p2.age )
print( p2.phone)













